package com.lyy.snake.common.utils;import com.google.common.base.Splitter;import com.google.common.collect.Iterables;import com.google.common.collect.Lists;import java.lang.reflect.InvocationTargetException;import java.lang.reflect.Method;import java.util.*;/** * @author jinming.wu * @date 2014-3-5 */public class ListUtils {    public static <T> List<T> convertStringToList(String content, String separator) {        Iterable<T> iterable = (Iterable<T>) Splitter.on(separator).omitEmptyStrings().trimResults().split(content);        if (Iterables.isEmpty(iterable)) {            return Collections.emptyList();        }        return Lists.newArrayList(iterable);    }    public static Set<Integer> randomSelectFromCollection(List<Integer> userIds, int count) {        if (isEmpty(userIds) || count == 0) {            return Collections.emptySet();        }        if (count >= userIds.size()) {            return new HashSet<Integer>(userIds);        }        Collections.shuffle(userIds);        return new HashSet<Integer>(userIds.subList(0, count));    }    public static <K,V> Map<K,V> listToMap(List<V> listValue,String getMethodName) throws InvocationTargetException, IllegalAccessException, NoSuchMethodException {        Map<K,V> mapValue = new HashMap<K, V>();        if (isEmpty(listValue)){            return mapValue;        }        Method method = listValue.get(0).getClass().getMethod(getMethodName);        for (V val:listValue){            K key = (K)method.invoke(val);            mapValue.put(key,val);        }        return mapValue;    }    public static <T> List<T> getPropertyList(List listValue,String getMethodName)throws Exception{        if (isEmpty(listValue)){            return new ArrayList<T>();        }        Method getMethod = listValue.get(0).getClass().getMethod(getMethodName);        List<T> propertyList = new ArrayList<T>();        for (Object o:listValue){            T propertyValue = (T)getMethod.invoke(o);            propertyList.add(propertyValue);        }        return propertyList;    }    public static boolean isEmpty(List list){        if (list==null || list.size()==0){            return true;        }        return false;    }    public static  <T> List<T> getSubListForPage(int page,int limit,List<T> listData){        if (isEmpty(listData)){            return new ArrayList<T>();        }        if (limit<1){            return new ArrayList<T>();        }        if (page<1){            return new ArrayList<T>();        }        int startIndex = (page-1)*limit;        return getSubList(startIndex,limit,listData);    }    public static  <T> List<T> getSubList(int startIndex,int limit,List<T> listData){        if (isEmpty(listData)){            return new ArrayList<T>();        }        if (limit<1){            return new ArrayList<T>();        }        if (startIndex<0){            return new ArrayList<T>();        }        int end = startIndex + limit;        if (startIndex >= listData.size()){            return new ArrayList();        }        if (end > listData.size()){            end = listData.size();        }        List<T> retList = listData.subList(startIndex, end);        return retList;    }}